From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Yanbing Zhao <zzzz@mail.ustc.edu.cn>
Date: Wed, 6 Jul 2016 12:37:24 +0800
Subject: v3.2.2

---
 .../fmltutor/block/BlockMetalFurnace.java          |  59 +++++++++++-
 .../ustc_zzzz/fmltutor/common/CommonProxy.java     |   2 +
 .../fmltutor/tileentity/TileEntityLoader.java      |  20 ++++
 .../tileentity/TileEntityMetalFurnace.java         | 107 +++++++++++++++++++++
 4 files changed, 186 insertions(+), 2 deletions(-)
 create mode 100644 src/main/java/com/github/ustc_zzzz/fmltutor/tileentity/TileEntityLoader.java
 create mode 100644 src/main/java/com/github/ustc_zzzz/fmltutor/tileentity/TileEntityMetalFurnace.java

diff --git a/src/main/java/com/github/ustc_zzzz/fmltutor/block/BlockMetalFurnace.java b/src/main/java/com/github/ustc_zzzz/fmltutor/block/BlockMetalFurnace.java
index 57deadf..4db4b85 100644
--- a/src/main/java/com/github/ustc_zzzz/fmltutor/block/BlockMetalFurnace.java
+++ b/src/main/java/com/github/ustc_zzzz/fmltutor/block/BlockMetalFurnace.java
@@ -3,8 +3,10 @@ package com.github.ustc_zzzz.fmltutor.block;
 import java.util.List;
 
 import com.github.ustc_zzzz.fmltutor.creativetab.CreativeTabsLoader;
+import com.github.ustc_zzzz.fmltutor.tileentity.TileEntityMetalFurnace;
 
 import net.minecraft.block.Block;
+import net.minecraft.block.BlockContainer;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.properties.PropertyBool;
 import net.minecraft.block.properties.PropertyDirection;
@@ -16,14 +18,19 @@ import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
+import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.BlockPos;
+import net.minecraft.util.ChatComponentText;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.IStringSerializable;
 import net.minecraft.world.World;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import net.minecraftforge.items.CapabilityItemHandler;
+import net.minecraftforge.items.IItemHandler;
+import net.minecraftforge.items.IItemHandlerModifiable;
 
-public class BlockMetalFurnace extends Block
+public class BlockMetalFurnace extends BlockContainer
 {
     public static enum EnumMaterial implements IStringSerializable
     {
@@ -68,7 +75,14 @@ public class BlockMetalFurnace extends Block
     public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn,
             EnumFacing side, float hitX, float hitY, float hitZ)
     {
-        worldIn.setBlockState(pos, state.cycleProperty(BURNING));
+        if (!worldIn.isRemote)
+        {
+            TileEntityMetalFurnace te = (TileEntityMetalFurnace) worldIn.getTileEntity(pos);
+            IItemHandler up = te.getCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY, EnumFacing.UP);
+            IItemHandler down = te.getCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY, EnumFacing.DOWN);
+            String msg = String.format("Up: %s, Down: %s", up.getStackInSlot(0), down.getStackInSlot(0));
+            playerIn.addChatComponentMessage(new ChatComponentText(msg));
+        }
         return true;
     }
 
@@ -118,4 +132,45 @@ public class BlockMetalFurnace extends Block
     {
         return new BlockState(this, FACING, BURNING, MATERIAL);
     }
+
+    @Override
+    public TileEntity createNewTileEntity(World worldIn, int meta)
+    {
+        return new TileEntityMetalFurnace();
+    }
+
+    @Override
+    public int getRenderType()
+    {
+        return 3;
+    }
+
+    @Override
+    public void breakBlock(World worldIn, BlockPos pos, IBlockState state)
+    {
+        TileEntityMetalFurnace te = (TileEntityMetalFurnace) worldIn.getTileEntity(pos);
+
+        IItemHandler up = te.getCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY, EnumFacing.UP);
+        IItemHandler down = te.getCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY, EnumFacing.DOWN);
+
+        for (int i = up.getSlots() - 1; i >= 0; --i)
+        {
+            if (up.getStackInSlot(i) != null)
+            {
+                Block.spawnAsEntity(worldIn, pos, up.getStackInSlot(i));
+                ((IItemHandlerModifiable) up).setStackInSlot(i, null);
+            }
+        }
+
+        for (int i = down.getSlots() - 1; i >= 0; --i)
+        {
+            if (down.getStackInSlot(i) != null)
+            {
+                Block.spawnAsEntity(worldIn, pos, down.getStackInSlot(i));
+                ((IItemHandlerModifiable) down).setStackInSlot(i, null);
+            }
+        }
+
+        super.breakBlock(worldIn, pos, state);
+    }
 }
diff --git a/src/main/java/com/github/ustc_zzzz/fmltutor/common/CommonProxy.java b/src/main/java/com/github/ustc_zzzz/fmltutor/common/CommonProxy.java
index 8226709..f00e462 100644
--- a/src/main/java/com/github/ustc_zzzz/fmltutor/common/CommonProxy.java
+++ b/src/main/java/com/github/ustc_zzzz/fmltutor/common/CommonProxy.java
@@ -11,6 +11,7 @@ import com.github.ustc_zzzz.fmltutor.entity.FakePlayerLoader;
 import com.github.ustc_zzzz.fmltutor.fluid.FluidLoader;
 import com.github.ustc_zzzz.fmltutor.item.ItemLoader;
 import com.github.ustc_zzzz.fmltutor.potion.PotionLoader;
+import com.github.ustc_zzzz.fmltutor.tileentity.TileEntityLoader;
 import com.github.ustc_zzzz.fmltutor.worldgen.WorldGeneratorLoader;
 
 import net.minecraftforge.fml.common.event.FMLInitializationEvent;
@@ -30,6 +31,7 @@ public class CommonProxy
         new OreDictionaryLoader(event);
         new PotionLoader(event);
         new EntityLoader(event);
+        new TileEntityLoader(event);
     }
 
     public void init(FMLInitializationEvent event)
diff --git a/src/main/java/com/github/ustc_zzzz/fmltutor/tileentity/TileEntityLoader.java b/src/main/java/com/github/ustc_zzzz/fmltutor/tileentity/TileEntityLoader.java
new file mode 100644
index 0000000..2675156
--- /dev/null
+++ b/src/main/java/com/github/ustc_zzzz/fmltutor/tileentity/TileEntityLoader.java
@@ -0,0 +1,20 @@
+package com.github.ustc_zzzz.fmltutor.tileentity;
+
+import com.github.ustc_zzzz.fmltutor.FMLTutor;
+
+import net.minecraft.tileentity.TileEntity;
+import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.common.registry.GameRegistry;
+
+public class TileEntityLoader
+{
+    public TileEntityLoader(FMLPreInitializationEvent event)
+    {
+        registerTileEntity(TileEntityMetalFurnace.class, "MetalFurnace");
+    }
+
+    public void registerTileEntity(Class<? extends TileEntity> tileEntityClass, String id)
+    {
+        GameRegistry.registerTileEntity(tileEntityClass, FMLTutor.MODID + ":" + id);
+    }
+}
diff --git a/src/main/java/com/github/ustc_zzzz/fmltutor/tileentity/TileEntityMetalFurnace.java b/src/main/java/com/github/ustc_zzzz/fmltutor/tileentity/TileEntityMetalFurnace.java
new file mode 100644
index 0000000..35fa2bd
--- /dev/null
+++ b/src/main/java/com/github/ustc_zzzz/fmltutor/tileentity/TileEntityMetalFurnace.java
@@ -0,0 +1,107 @@
+package com.github.ustc_zzzz.fmltutor.tileentity;
+
+import com.github.ustc_zzzz.fmltutor.block.BlockMetalFurnace;
+
+import net.minecraft.block.state.IBlockState;
+import net.minecraft.item.ItemStack;
+import net.minecraft.nbt.NBTTagCompound;
+import net.minecraft.tileentity.TileEntity;
+import net.minecraft.util.BlockPos;
+import net.minecraft.util.EnumFacing;
+import net.minecraft.util.ITickable;
+import net.minecraft.world.World;
+import net.minecraftforge.common.capabilities.Capability;
+import net.minecraftforge.items.CapabilityItemHandler;
+import net.minecraftforge.items.ItemStackHandler;
+
+public class TileEntityMetalFurnace extends TileEntity implements ITickable
+{
+    protected int burnTime = 0;
+
+    protected ItemStackHandler upInventory = new ItemStackHandler();
+    protected ItemStackHandler downInventory = new ItemStackHandler();
+
+    @Override
+    public boolean hasCapability(Capability<?> capability, EnumFacing facing)
+    {
+        if (CapabilityItemHandler.ITEM_HANDLER_CAPABILITY.equals(capability))
+        {
+            return true;
+        }
+        return super.hasCapability(capability, facing);
+    }
+
+    @Override
+    public <T> T getCapability(Capability<T> capability, EnumFacing facing)
+    {
+        if (CapabilityItemHandler.ITEM_HANDLER_CAPABILITY.equals(capability))
+        {
+            @SuppressWarnings("unchecked")
+            T result = (T) (facing == EnumFacing.DOWN ? downInventory : upInventory);
+            return result;
+        }
+        return super.getCapability(capability, facing);
+    }
+
+    @Override
+    public void readFromNBT(NBTTagCompound compound)
+    {
+        super.readFromNBT(compound);
+        this.upInventory.deserializeNBT(compound.getCompoundTag("UpInventory"));
+        this.downInventory.deserializeNBT(compound.getCompoundTag("DownInventory"));
+        this.burnTime = compound.getInteger("BurnTime");
+    }
+
+    @Override
+    public void writeToNBT(NBTTagCompound compound)
+    {
+        super.writeToNBT(compound);
+        compound.setTag("UpInventory", this.upInventory.serializeNBT());
+        compound.setTag("DownInventory", this.downInventory.serializeNBT());
+        compound.setInteger("BurnTime", this.burnTime);
+    }
+
+    @Override
+    public boolean shouldRefresh(World world, BlockPos pos, IBlockState oldState, IBlockState newState)
+    {
+        return oldState.getBlock() != newState.getBlock();
+    }
+
+    @Override
+    public void update()
+    {
+        if (!this.worldObj.isRemote)
+        {
+            ItemStack itemStack = upInventory.extractItem(0, 1, true);
+            IBlockState state = this.worldObj.getBlockState(pos);
+
+            if (itemStack != null && downInventory.insertItem(0, itemStack, true) == null)
+            {
+                this.worldObj.setBlockState(pos, state.withProperty(BlockMetalFurnace.BURNING, Boolean.TRUE));
+
+                int burnTotalTime = 200;
+                switch (state.getValue(BlockMetalFurnace.MATERIAL))
+                {
+                case IRON:
+                    burnTotalTime = 150;
+                    break;
+                case GOLD:
+                    burnTotalTime = 100;
+                    break;
+                }
+
+                if (++this.burnTime >= burnTotalTime)
+                {
+                    this.burnTime = 0;
+                    itemStack = upInventory.extractItem(0, 1, false);
+                    downInventory.insertItem(0, itemStack, false);
+                    this.markDirty();
+                }
+            }
+            else
+            {
+                this.worldObj.setBlockState(pos, state.withProperty(BlockMetalFurnace.BURNING, Boolean.FALSE));
+            }
+        }
+    }
+}
-- 
2.11.0

